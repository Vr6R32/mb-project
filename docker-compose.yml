version: '3'

services:


  # openssl pkcs12 -in keystore.p12 -nokeys -out certificate.crt -nodes
  # openssl pkcs12 -in keystore.p12 -nocerts -out private.key -nodes
  nginx:
    image: nginx:latest
    ports:
      - "443:443"
    volumes:
      - ./nginx/config.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/certificate.crt:/etc/nginx/certificate.crt:ro
      - ./nginx/private.key:/etc/nginx/private.key:ro
      - ./nginx/logs:/var/log/nginx
    networks:
      - logging
    depends_on:
      - mb-api

  mb-api:
    container_name: mb-api
    image: michaelkey/mb-api:0.0.1-SNAPSHOT
    ports:
      - "20134:20134"
    volumes:
      - api-logs:/var/log/spring
      - ./files/public:/app/files/public
      - ./files/private:/app/files/private
    environment:
      SERVER_PORT: 20134
      SPRING_PROFILES_ACTIVE: docker
      TZ: Europe/Warsaw
    depends_on:
      - postgres
    networks:
      - kafka-network
      - logging
      - postgres
    restart: unless-stopped


  mailing-service:
    container_name: mailing-service
    image: michaelkey/mailing-service:0.0.1-SNAPSHOT
    ports:
      - "20135:20135"
    volumes:
      - api-logs:/var/log/spring
    environment:
      SERVER_PORT: 20135
      TZ: Europe/Warsaw
    networks:
      - kafka-network
      - logging
    restart: unless-stopped

  postgres:
    image: postgres:13
    container_name: postgres-db
    ports:
      - "3309:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./db-init/db-init.sql:/docker-entrypoint-initdb.d/db-init.sql
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: dontgotosql
      PGDATA: /data/postgres
      TZ: Europe/Warsaw
    networks:
      - postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 1m
      timeout: 10s
      retries: 5
    restart: unless-stopped


  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      TZ: Europe/Warsaw
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - postgres
    restart: unless-stopped



  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.48.0
    volumes:
      - ./logging_infrastructure/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - logging
    ports:
      - "9090:9090"
    restart: unless-stopped
    environment:
      TZ: Europe/Warsaw


  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=secret
    volumes:
      - grafana-data:/var/lib/grafana
      - ./logging_infrastructure/grafana/dashboards:/var/lib/grafana/dashboards
      - ./logging_infrastructure/grafana/datasources-config.yml:/etc/grafana/provisioning/datasources/main.yml
      - ./logging_infrastructure/grafana/dashboard-config.yml:/etc/grafana/provisioning/dashboards/main.yml
    depends_on:
      - prometheus
      - loki
    ports:
      - "3000:3000"
    networks:
      - logging
    restart: unless-stopped


  loki:
    container_name: loki
    image: grafana/loki:latest
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - logging
    restart: unless-stopped
    environment:
      TZ: Europe/Warsaw

  promtail:
    container_name: promtail
    image: grafana/promtail:latest
    volumes:
      - api-logs:/var/log/spring
      - ./logging_infrastructure/promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - logging
    restart: unless-stopped
    environment:
      TZ: Europe/Warsaw

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - logging
    restart: unless-stopped

  jenkins:
    build:
      context: ./jenkins
      dockerfile: Dockerfile
    container_name: jenkins
    ports:
      - "27015:8080"
      - "50000:50000"
    volumes:
      - jenkins-data:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - ./jenkins/jenkins.yml:/var/jenkins_home/casc_configs/jenkins.yml:ro
      - ./jenkins/plugins.txt:/usr/share/jenkins/ref/plugins.txt
#      - ./db-init/db-init.sql:/var/jenkins_home/mb/db-init.sql
      - api-logs:/var/log/spring
    environment:
      JAVA_OPTS: "-Djenkins.install.runSetupWizard=false"
      CASC_JENKINS_CONFIG: "/var/jenkins_home/casc_configs/jenkins.yml"
    command: >
      sh -c "jenkins-plugin-cli -f /usr/share/jenkins/ref/plugins.txt && exec /usr/local/bin/jenkins.sh"
    restart: unless-stopped


  kafka-broker:
    container_name: kafka-broker
    image: confluentinc/cp-kafka:${KAFKA_VERSION}
    user: "0:0"
    hostname: kafka-broker
    restart: always
    ports:
      - "9092:9092"
    environment:
      KAFKA_HEAP_OPTS: "-Xmx384m -Xms384m"
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_COMPRESSION_TYPE: producer
    networks:
      - kafka-network

  zookeeper:
    container_name: kafka-zookeeper
    image: confluentinc/cp-zookeeper:${KAFKA_VERSION}
    user: "0:0"
    hostname: kafka-zookeeper
    restart: always
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: 'kafka-zookeeper:2888:3888'
    networks:
     - kafka-network

  init-kafka:
    image: confluentinc/cp-kafka:${KAFKA_VERSION}
    entrypoint: [ '/bin/sh', '-c' ]
    depends_on:
      - zookeeper
      - kafka-broker
    command: |
      "
      # waiting for kafka will be ready
      kafka-topics --bootstrap-server kafka-broker:9092 --list
      
      echo -e 'Creating topic mailing-service'
      kafka-topics --bootstrap-server kafka-broker:9092 --create --if-not-exists --topic mailing-service --replication-factor 1 --partitions 3
      
      echo -e 'Created topics:'
      kafka-topics --bootstrap-server kafka-broker:9092 --list
      "
    networks:
      - kafka-network


volumes:
  api-logs:
    driver: local
    driver_opts:
      type: none
      device: ./logging_infrastructure/api-logs
      o: bind
  jenkins-data:
  postgres-data:
  pgadmin-data:
  grafana-data:

networks:
  postgres:
    driver: bridge
  logging:
    driver: bridge
  kafka-network:
    driver: bridge

